[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "paramfittorchdemo",
    "section": "",
    "text": "pip install paramfittorchdemo\nYou should checkout the writeup on fitting parameters for differential equations using pytorch here."
  },
  {
    "objectID": "training.html#what-is-the-problem-we-are-trying-to-solve",
    "href": "training.html#what-is-the-problem-we-are-trying-to-solve",
    "title": "Differential Equations as a Pytorch Neural Network Layer",
    "section": "What is the problem we are trying to solve?",
    "text": "What is the problem we are trying to solve?\nLet’s say we have some time series data y(t) that we want to model with a differential equation. The data takes the form of a set of observations yᵢ at times tᵢ. Based on some domain knowledge of the underlying system we can write down a differential equation to approximate the system.\nIn the most general form this takes the form:\n\\[\\begin{align}\n\\frac{dy}{dt} = f(y,t;\\theta)  \\\\\ny(t_0) = y_0\n\\end{align}\\]\nwhere \\(y\\) is the state of the system, \\(t\\) is time, and \\(\\theta\\) are the parameters of the model. In this post we will assume that the parameters \\(\\theta\\) are unknown and we want to learn them from the data.\nLet’s import the libraries we will need for this post. The only non standard machine learning library we will use the  torchdiffeq  library to solve the differential equations. This library implements numerical differential equation solvers in pytorch."
  },
  {
    "objectID": "training.html#models",
    "href": "training.html#models",
    "title": "Differential Equations as a Pytorch Neural Network Layer",
    "section": "Models",
    "text": "Models\nThe first step of our modeling process is to define the model. For differential equations this means we must choose a form for the function \\(f(y,t;\\theta)\\) and a way to represent the parameters \\(\\theta\\). We also need to do this in a way that is compatible with pytorch.\nThis means we need to encode our function as a torch.nn.Module class. As you will see this is pretty easy and only requires defining two methods. Lets get started with the first of out three example models.\n\nvan Der Pol Oscillator (VDP)\nWe can define a differential equation system using the  torch.nn.Module  class where the parameters are created using the  torch.nn.Parameter  declaration. This lets pytorch know that we want to accumulate gradients for those parameters. We can also include fixed parameters (don’t want to fit these) by just not wrapping them with this declaration.\nThe first example we will use is the classic VDP oscillator which is a nonlinear oscillator with a single parameter \\(\\mu\\). The differential equations for this system are:\n\\[\\begin{align}\n\\frac{dX}{dt} &= \\mu(x-\\frac{1}{3}x^3-y)  \\\\\n\\frac{dY}{dt} &= \\frac{x}{\\mu}  \\\\\n\\end{align}\\]\nwhere \\(X\\) and \\(Y\\) are the state variables. The VDP model is used to model everything from electronic circuits to cardiac arrhythmias and circadian rhythms. We can define this system in pytorch as follows:\n\nclass VDP(nn.Module):\n    \"\"\" \n    Define the Van der Pol oscillator as a PyTorch module.\n    \"\"\"\n    def __init__(self, \n                 mu: float, # Stiffness parameter of the VDP oscillator\n                 ):\n        super().__init__() \n        self.mu = torch.nn.Parameter(torch.tensor(mu)) # make mu a learnable parameter\n        \n    def forward(self, \n                t: float, # time index\n                state: torch.TensorType, # state of the system first dimension is the batch size\n                ) -> torch.Tensor: # return the derivative of the state\n        \"\"\" \n            Define the right hand side of the VDP oscillator.\n        \"\"\"\n        x = state[..., 0] # first dimension is the batch size\n        y = state[..., 1]\n        dX = self.mu*(x-1/3*x**3 - y)\n        dY = 1/self.mu*x\n        # trick to make sure our return value has the same shape as the input\n        dfunc = torch.zeros_like(state) \n        dfunc[..., 0] = dX\n        dfunc[..., 1] = dY\n        return dfunc\n    \n    def __repr__(self):\n        \"\"\"Print the parameters of the model.\"\"\"\n        return f\" mu: {self.mu.item()}\"\n\n\nsource\n\n\nVDP\n\n VDP (mu:float)\n\nDefine the Van der Pol oscillator as a PyTorch module.\n\n\n\n\nType\nDetails\n\n\n\n\nmu\nfloat\nStiffness parameter of the VDP oscillator\n\n\n\nYou only need to define the dunder init method (init) and the forward method. I added a string method repr to pretty print the parameter. The key point here is how we can translate from the differential equation to torch code in the forward method. This method needs to define the right-hand side of the differential equation.\nLet’s see how we can integrate this model using the odeint method from torchdiffeq:\n\nvdp_model = VDP(mu=0.5)\n\n# Create a time vector, this is the time axis of the ODE\nts = torch.linspace(0,30.0,1000)\n# Create a batch of initial conditions \nbatch_size = 30\n# Creates some random initial conditions\ninitial_conditions = torch.tensor([0.01, 0.01]) + 0.2*torch.randn((batch_size,2))\n\n# Solve the ODE, odeint comes from torchdiffeq\nsol = odeint(vdp_model, initial_conditions, ts, method='dopri5').detach().numpy()\n\n\nplt.plot(ts, sol[:,:,0], lw=0.5);\nplt.title(\"Time series of the VDP oscillator\");\nplt.xlabel(\"time\");\nplt.ylabel(\"x\");\n\n\n\n\nHere is a phase plane plot of the solution (a phase plane plot of a parametric plot of the dynamical state).\n\n# Check the solution\nplt.plot(sol[:,:,0], sol[:,:,1], lw=0.5);\nplt.title(\"Phase plot of the VDP oscillator\");\nplt.xlabel(\"x\");\nplt.ylabel(\"y\");\n\n\n\n\nThe colors indicate the 30 seperate trajectories in our batch. The solution comes back as a torch tensor with dimensions (time_points, batch number, dynamical_dimension).\n\nsol.shape\n\n(1000, 30, 2)\n\n\n\n\nLotka Volterra Predator Prey equations\nAs another example we create a module for the Lotka Volterra predator-prey equations. In the Lotka-Volterra (LV) predator-prey model, there are two primary variables: the population of prey (\\(x\\)) and the population of predators (\\(y\\)). The model is defined by the following equations:\n\\[\\begin{align}\n\\frac{dx}{dt} &= \\alpha x - \\beta xy \\\\\n\\frac{dy}{dt} &= -\\delta y + \\gamma xy \\\\\n\\end{align}\\]\nThe population of prey (\\(x\\)) represents the number of individuals of the prey species present in the ecosystem at any given time. The population of predators (\\(y\\)) represents the number of individuals of the predator species present in the ecosystem at any given time.\nIn addition to the primary variables, there are also four parameters that are used to describe various ecological factors in the model:\n\\(\\alpha\\) represents the intrinsic growth rate of the prey population in the absence of predators. \\(\\beta\\) represents the predation rate of the predators on the prey. \\(\\gamma\\) represents the death rate of the predator population in the absence of prey. \\(\\delta\\) represents the efficiency with which the predators convert the consumed prey into new predator biomass.\nTogether, these variables and parameters describe the dynamics of predator-prey interactions in an ecosystem and are used to mathematically model the changes in the populations of prey and predators over time.\n\nclass LotkaVolterra(nn.Module):\n    \"\"\" \n     The Lotka-Volterra equations are a pair of first-order, non-linear, differential equations\n     describing the dynamics of two species interacting in a predator-prey relationship.\n    \"\"\"\n    def __init__(self,\n                 alpha: float = 1.5, # The alpha parameter of the Lotka-Volterra system\n                 beta: float = 1.0, # The beta parameter of the Lotka-Volterra system\n                 delta: float = 3.0, # The delta parameter of the Lotka-Volterra system\n                 gamma: float = 1.0 # The gamma parameter of the Lotka-Volterra system\n                 ) -> None:\n        super().__init__()\n        self.model_params = torch.nn.Parameter(torch.tensor([alpha, beta, delta, gamma]))\n        \n        \n    def forward(self, t, state):\n        x = state[...,0]      #variables are part of vector array u \n        y = state[...,1]\n        sol = torch.zeros_like(state)\n        \n        #coefficients are part of tensor model_params\n        alpha, beta, delta, gamma = self.model_params    \n        sol[...,0] = alpha*x - beta*x*y\n        sol[...,1] = -delta*y + gamma*x*y\n        return sol\n    \n    def __repr__(self):\n        return f\" alpha: {self.model_params[0].item()}, \\\n            beta: {self.model_params[1].item()}, \\\n                delta: {self.model_params[2].item()}, \\\n                    gamma: {self.model_params[3].item()}\"\n\n\nsource\n\n\nLotkaVolterra\n\n LotkaVolterra (alpha:float=1.5, beta:float=1.0, delta:float=3.0,\n                gamma:float=1.0)\n\nThe Lotka-Volterra equations are a pair of first-order, non-linear, differential equations describing the dynamics of two species interacting in a predator-prey relationship.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nalpha\nfloat\n1.5\nThe alpha parameter of the Lotka-Volterra system\n\n\nbeta\nfloat\n1.0\nThe beta parameter of the Lotka-Volterra system\n\n\ndelta\nfloat\n3.0\nThe delta parameter of the Lotka-Volterra system\n\n\ngamma\nfloat\n1.0\nThe gamma parameter of the Lotka-Volterra system\n\n\nReturns\nNone\n\n\n\n\n\nThis follows the same pattern as the first example, the main difference is that we now have four parameters and store them as a model_params tensor. Here is the integration and plotting code for the predator-prey equations.\n\nlv_model = LotkaVolterra() #use default parameters\nts = torch.linspace(0,30.0,1000) \nbatch_size = 30\n# Create a batch of initial conditions (batch_dim, state_dim) as small perturbations around one value\ninitial_conditions = torch.tensor([[3,3]]) + 0.50*torch.randn((batch_size,2))\nsol = odeint(lv_model, initial_conditions, ts, method='dopri5').detach().numpy()\n# Check the solution\n\nplt.plot(ts, sol[:,:,0], lw=0.5);\nplt.title(\"Time series of the Lotka-Volterra system\");\nplt.xlabel(\"time\");\nplt.ylabel(\"x\");\n\n\n\n\nNow a phase plane plot of the system:\n\nplt.plot(sol[:,:,0], sol[:,:,1], lw=0.5);\nplt.title(\"Phase plot of the Lotka-Volterra system\");\nplt.xlabel(\"x\");\nplt.ylabel(\"y\");\n\n\n\n\n\n\nLorenz system\nThe last example we will use is the Lorenz equations which are famous for their beatiful plots illustrating chaotic dynamics. They originally came from a reduced model for fluid dynamics and take the form:\n\\[\\begin{align}\n\\frac{dx}{dt} &= \\sigma(y - x) \\\\\n\\frac{dy}{dt} &= x(\\rho - z) - y \\\\\n\\frac{dz}{dt} &= xy - \\beta z\n\\end{align}\\]\nwhere \\(x\\), \\(y\\), and \\(z\\) are the state variables, and \\(\\sigma\\), \\(\\rho\\), and \\(\\beta\\) are the system parameters.\n\nclass Lorenz(nn.Module):\n    \"\"\" \n    Define the Lorenz system as a PyTorch module.\n    \"\"\"\n    def __init__(self, \n                 sigma: float =10.0, # The sigma parameter of the Lorenz system\n                 rho: float=28.0, # The rho parameter of the Lorenz system\n                beta: float=8.0/3, # The beta parameter of the Lorenz system\n                ):\n        super().__init__() \n        self.model_params = torch.nn.Parameter(torch.tensor([sigma, rho, beta]))\n        \n        \n    def forward(self, t, state):\n        x = state[...,0]      #variables are part of vector array u \n        y = state[...,1]\n        z = state[...,2]\n        sol = torch.zeros_like(state)\n        \n        sigma, rho, beta = self.model_params    #coefficients are part of vector array p\n        sol[...,0] = sigma*(y-x)\n        sol[...,1] = x*(rho-z) - y\n        sol[...,2] = x*y - beta*z\n        return sol\n    \n    def __repr__(self):\n        return f\" sigma: {self.model_params[0].item()}, \\\n            rho: {self.model_params[1].item()}, \\\n                beta: {self.model_params[2].item()}\"\n\n\nsource\n\n\nLorenz\n\n Lorenz (sigma:float=10.0, rho:float=28.0, beta:float=2.6666666666666665)\n\nDefine the Lorenz system as a PyTorch module.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsigma\nfloat\n10.0\nThe sigma parameter of the Lorenz system\n\n\nrho\nfloat\n28.0\nThe rho parameter of the Lorenz system\n\n\nbeta\nfloat\n2.6666666666666665\nThe beta parameter of the Lorenz system\n\n\n\nThis shows how to integrate this system and plot the results. This system (at these parameter values) shows chaotic dynamics so initial conditions that start off close together diverge from one another exponetially.\n\nlorenz_model = Lorenz()\nts = torch.linspace(0,50.0,3000)\nbatch_size = 30\n# Create a batch of initial conditions (batch_dim, state_dim) as small perturbations around one value\ninitial_conditions = torch.tensor([[1.0,0.0,0.0]]) + 0.10*torch.randn((batch_size,3))\nsol = odeint(lorenz_model, initial_conditions, ts, method='dopri5').detach().numpy()\n\n# Check the solution\nplt.plot(ts[:2000], sol[:2000,:,0], lw=0.5);\nplt.title(\"Time series of the Lorenz system\");\nplt.xlabel(\"time\");\nplt.ylabel(\"x\");\n\n\n\n\nHere we show the famous butterfly plot (phase plane plot) for the first set of initial conditions in the batch.\n\nplt.plot(sol[:,0,0], sol[:,0,1], color='black', lw=0.5);\nplt.title(\"Phase plot of the Lorenz system\");\nplt.xlabel(\"x\");\nplt.ylabel(\"y\");"
  },
  {
    "objectID": "training.html#data",
    "href": "training.html#data",
    "title": "Differential Equations as a Pytorch Neural Network Layer",
    "section": "Data",
    "text": "Data\nNow that we can define the differential equation models in pytorch we need to create some data to be used in training. This is where things start to get really neat as we see our first glimpse of being able to hijack deep learning machinery for fitting the parameters. Really we could just use tensor of data directly, but this is a nice way to organize the data. It will also be useful if you have some experimental data that you want to use.\nTorch provides the  Dataset  class for loading in data. To use it you just need to create a subclass and define two methods. The __len__ function that returns the number of data points and a __getitem__ function that returns the data point at a given index. If you are wondering these methods are what underly the len(array) and ’array[0]` subscript access in python lists.\nThe rest of boilerplate code needed in defined in the parent class torch.utils.data.Dataset. We will see the power of these method when we go to define a training loop.\n\nclass SimODEData(Dataset):\n    \"\"\" \n        A very simple dataset class for simulating ODEs\n    \"\"\"\n    def __init__(self,\n                 ts: List[torch.Tensor], # List of time points as tensors\n                 values: List[torch.Tensor], # List of dynamical state values (tensor) at each time point \n                 true_model: Union[torch.nn.Module,None] = None,\n                 ) -> None:\n        self.ts = ts \n        self.values = values \n        self.true_model = true_model\n        \n    def __len__(self) -> int:\n        return len(self.ts)\n    \n    def __getitem__(self, index: int) -> Tuple[torch.Tensor, torch.Tensor]:\n        return self.ts[index], self.values[index]\n\n\nsource\n\nSimODEData\n\n SimODEData (ts:List[torch.Tensor], values:List[torch.Tensor],\n             true_model:Optional[torch.nn.modules.module.Module]=None)\n\nA very simple dataset class for simulating ODEs\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nts\ntyping.List[torch.Tensor]\n\nList of time points as tensors\n\n\nvalues\ntyping.List[torch.Tensor]\n\nList of dynamical state values (tensor) at each time point\n\n\ntrue_model\ntyping.Optional[torch.nn.modules.module.Module]\nNone\n\n\n\nReturns\nNone\n\n\n\n\n\nNext let’s create a quick generator function to generate some simulated data to test the algorithms on. In a real use case the data would be loaded from a file or database, but for this example we will just generate some data. In fact, I recommend that you always start with generated data to make sure your code is working before you try to load real data.\n\nsource\n\n\ncreate_sim_dataset\n\n create_sim_dataset (model:torch.nn.modules.module.Module,\n                     ts:torch.Tensor, num_samples:int=10,\n                     sigma_noise:float=0.1,\n                     initial_conditions_default:torch.Tensor=tensor([0.,\n                     0.]), sigma_initial_conditions:float=0.1)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmodel\nModule\n\nmodel to simulate from\n\n\nts\nTensor\n\nTime points to simulate for\n\n\nnum_samples\nint\n10\nNumber of samples to generate\n\n\nsigma_noise\nfloat\n0.1\nNoise level to add to the data\n\n\ninitial_conditions_default\nTensor\ntensor([0., 0.])\nDefault initial conditions\n\n\nsigma_initial_conditions\nfloat\n0.1\nNoise level to add to the initial conditions\n\n\nReturns\nSimODEData\n\n\n\n\n\nThis just takes in a differential equation model with some initial states and generates some time-series data from it (and adds in some gaussian noise). This data is then passed into our custom dataset container.\n\nsource\n\n\nplot_time_series\n\n plot_time_series (true_model:torch.nn.modules.module.Module,\n                   fit_model:torch.nn.modules.module.Module,\n                   data:__main__.SimODEData, time_range:tuple=(0.0, 30.0),\n                   ax:matplotlib.axes._axes.Axes=None, dyn_var_idx:int=0,\n                   title:str='Model fits', *args, **kwargs)\n\nPlot the true model and fit model on the same axes.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntrue_model\nModule\n\ntrue underlying model for the simulated data\n\n\nfit_model\nModule\n\nmodel fit to the data\n\n\ndata\nSimODEData\n\ndata set to plot (scatter)\n\n\ntime_range\ntuple\n(0.0, 30.0)\nrange of times to simulate the models for\n\n\nax\nAxes\nNone\n\n\n\ndyn_var_idx\nint\n0\n\n\n\ntitle\nstr\nModel fits\n\n\n\nargs\n\n\n\n\n\nkwargs\n\n\n\n\n\nReturns\ntyping.Tuple[matplotlib.figure.Figure, matplotlib.axes._axes.Axes]\n\n\n\n\n\n\nsource\n\n\nplot_phase_plane\n\n plot_phase_plane (true_model:torch.nn.modules.module.Module,\n                   fit_model:torch.nn.modules.module.Module,\n                   data:__main__.SimODEData, time_range:tuple=(0.0, 30.0),\n                   ax:matplotlib.axes._axes.Axes=None,\n                   dyn_var_idx:tuple=(0, 1), title:str='Model fits',\n                   *args, **kwargs)\n\nPlot the true model and fit model on the same axes.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntrue_model\nModule\n\ntrue underlying model for the simulated data\n\n\nfit_model\nModule\n\nmodel fit to the data\n\n\ndata\nSimODEData\n\ndata set to plot (scatter)\n\n\ntime_range\ntuple\n(0.0, 30.0)\nrange of times to simulate the models for\n\n\nax\nAxes\nNone\n\n\n\ndyn_var_idx\ntuple\n(0, 1)\n\n\n\ntitle\nstr\nModel fits\n\n\n\nargs\n\n\n\n\n\nkwargs\n\n\n\n\n\nReturns\ntyping.Tuple[matplotlib.figure.Figure, matplotlib.axes._axes.Axes]"
  },
  {
    "objectID": "training.html#training-loop",
    "href": "training.html#training-loop",
    "title": "Differential Equations as a Pytorch Neural Network Layer",
    "section": "Training Loop",
    "text": "Training Loop\nNext we will create a wrapper function for a pytorch training loop. Training means we want to update the model parameters to increase the alignment with the data ( or decrease the misalignment).\nOne of the tricks for this from deep learning is to not use all the data before taking a gradient step. Part of this is necessity for using enormous datasets as you can’t fit all of that data inside a GPU’s memory, but this also can help the gradient descent algorithm avoid getting stuck in local minima.\nThe training loop in words: * Divide the dataset into mini-batches, these are subsets of your entire data set. Usually want to choose these randomly. * Iterate through the mini-batches, for each mini-batch: * Generate the predictions using the current model parameters * Calculate the loss (here we will use the mean squared error) * Calculate the gradients, using backpropagation.\n* Update the parameters using a gradient descent step. Here we use the Adam optimizer. * Each full pass through the dataset is called an epoch.\nOkay here is the code:\n\ndef train(model: torch.nn.Module, # Model to train\n          data: SimODEData, # Data to train on\n          lr: float = 1e-2, # learning rate for the Adam optimizer\n          epochs: int = 10, # Number of epochs to train for\n          batch_size: int = 5, # Batch size for training\n          method = 'rk4', # ODE solver to use\n          step_size: float = 0.10, # for fixed diffeq solver set the step size\n          show_every: int = 10, # How often to print the loss function message\n          save_plots_every: Union[int,None] = None, # save a plot of the fit, to disable make this None\n          model_name: str = \"\", #string for the model, used to reference the saved plots \n          *args: tuple, \n          **kwargs: dict\n          ):\n    \n    # Create a data loader to iterate over the data. This takes in our dataset and returns batches of data\n    trainloader = DataLoader(data, batch_size=batch_size, shuffle=True)\n    # Choose an optimizer. Adam is a good default choice as a fancy gradient descent\n    optimizer = torch.optim.Adam(model.parameters(), lr=lr)\n    # Create a loss function this computes the error between the predicted and true values\n    criterion = torch.nn.MSELoss() \n    \n    for epoch in range(epochs):\n        running_loss = 0.0 \n        for batchdata in trainloader:\n            optimizer.zero_grad() # reset gradients, famous gotcha in a pytorch training loop\n            ts, states = batchdata # unpack the data \n            initial_state = states[:,0,:] # grab the initial state\n            # Make the prediction and then flip the dimensions to be (batch, state_dim, time)\n            # Pytorch expects the batch dimension to be first\n            pred = odeint(model, initial_state, ts[0], method=method, options={'step_size': step_size}).transpose(0,1) \n            # Compute the loss\n            loss = criterion(pred, states)\n            # compute gradients\n            loss.backward() \n            # update parameters\n            optimizer.step() \n            running_loss += loss.item() # record loss\n        if epoch % show_every == 0:\n            print(f\"Loss at {epoch}: {running_loss}\")\n        # Use this to save plots of the fit every save_plots_every epochs\n        if save_plots_every is not None and epoch % save_plots_every == 0:\n            with torch.no_grad():\n                fig, ax = plot_time_series(data.true_model, model, data[0])\n                ax.set_title(f\"Epoch: {epoch}\")\n                fig.savefig(f\"./tmp_plots/{epoch}_{model_name}_fit_plot\")\n                plt.close()\n\n\nsource\n\ntrain\n\n train (model:torch.nn.modules.module.Module, data:__main__.SimODEData,\n        lr:float=0.01, epochs:int=10, batch_size:int=5, method='rk4',\n        step_size:float=0.1, show_every:int=10,\n        save_plots_every:Optional[int]=None, model_name:str='',\n        *args:tuple, **kwargs:dict)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmodel\nModule\n\nModel to train\n\n\ndata\nSimODEData\n\nData to train on\n\n\nlr\nfloat\n0.01\nlearning rate for the Adam optimizer\n\n\nepochs\nint\n10\nNumber of epochs to train for\n\n\nbatch_size\nint\n5\nBatch size for training\n\n\nmethod\nstr\nrk4\nODE solver to use\n\n\nstep_size\nfloat\n0.1\nfor fixed diffeq solver set the step size\n\n\nshow_every\nint\n10\nHow often to print the loss function message\n\n\nsave_plots_every\ntyping.Optional[int]\nNone\nsave a plot of the fit, to disable make this None\n\n\nmodel_name\nstr\n\nstring for the model, used to reference the saved plots\n\n\nargs\ntuple\n\n\n\n\nkwargs\ndict"
  },
  {
    "objectID": "training.html#examples",
    "href": "training.html#examples",
    "title": "Differential Equations as a Pytorch Neural Network Layer",
    "section": "Examples",
    "text": "Examples\n\nFitting the VDP Oscillator\nLet’s use this training loop to recover the parameters from simulated VDP oscillator data.\n\ntrue_mu = 0.30\nmodel_sim = VDP(mu=true_mu)\nts_data = torch.linspace(0.0,10.0,10) \ndata_vdp = create_sim_dataset(model_sim, \n                              ts = ts_data, \n                              num_samples=10, \n                              sigma_noise=0.01)\n\nLet’s create a model with the wrong parameter value and visualize the starting point.\n\nvdp_model = VDP(mu = 0.10) \nplot_time_series(model_sim, \n                 vdp_model, \n                 data_vdp[0], \n                 dyn_var_idx=1, \n                 title = \"VDP Model: Before Parameter Fits\");\n\n\n\n\nNow, we will use the training loop to fit the parameters of the VDP oscillator to the simulated data.\n\ntrain(vdp_model, data_vdp, epochs=50, model_name=\"vdp\");\nprint(f\"After training: {vdp_model}, where the true value is {true_mu}\")\nprint(f\"Final Parameter Recovery Error: {vdp_model.mu - true_mu}\")\n\nLoss at 0: 0.09973308071494102\nLoss at 10: 0.005132006946951151\nLoss at 20: 0.0007074056047713384\nLoss at 30: 0.00021287801791913807\nLoss at 40: 0.00020217221026541665\nAfter training:  mu: 0.3017330467700958, where the true value is 0.3\nFinal Parameter Recovery Error: 0.0017330348491668701\n\n\nNot to bad! Let’s see how the plot looks now…\n\nplot_time_series(model_sim, vdp_model, data_vdp[0], dyn_var_idx=1, title = \"VDP Model: Before Parameter Fits\");\n\n\n\n\nThe plot confirms that we almost perfectly recovered the parameter. One more quick plot, where we plot the dynamics of the system in the phase plane (a parametric plot of the state variables).\n\nplot_phase_plane(model_sim, vdp_model, data_vdp[0], title = \"VDP Model: After Fitting\");\n\n\n\n\n\n\nLotka Voltera Equations\nNow lets adapt our methods to fit simulated data from the Lotka Voltera equations.\n\nmodel_sim_lv = LotkaVolterra(1.5,1.0,3.0,1.0)\nts_data = torch.arange(0.0, 10.0, 0.1)\ndata_lv = create_sim_dataset(model_sim_lv, \n                              ts = ts_data, \n                              num_samples=10, \n                              sigma_noise=0.1,\n                              initial_conditions_default=torch.tensor([2.5, 2.5]))\n\n\nmodel_lv = LotkaVolterra(alpha=1.6, beta=1.1,delta=2.7, gamma=1.2) \n\nplot_time_series(model_sim_lv, model_lv, data = data_lv[0], title = \"Lotka Volterra: Before Fitting\");\n\n\n\n\n\ntrain(model_lv, data_lv, epochs=60, lr=1e-2, model_name=\"lotkavolterra\")\nprint(f\"Fitted model: {model_lv}\")\nprint(f\"True model: {model_sim_lv}\")\n\nLoss at 0: 1.1245160698890686\nLoss at 10: 0.13308029621839523\nLoss at 20: 0.047104522585868835\nLoss at 30: 0.023627933114767075\nLoss at 40: 0.021535277366638184\nLoss at 50: 0.02137285191565752\nFitted model:  alpha: 1.5944933891296387,             beta: 1.0464898347854614,                 delta: 2.819714307785034,                     gamma: 0.9388865232467651\nTrue model:  alpha: 1.5,             beta: 1.0,                 delta: 3.0,                     gamma: 1.0\n\n\n\nplot_time_series(model_sim_lv, model_lv, data = data_lv[0], title = \"Lotka Volterra: After Fitting\");\n\n\n\n\nNow let’s visualize the results using a phase plane plot.\n\nplot_phase_plane(model_sim_lv, model_lv, data_lv[0], title= \"Phase Plane for Lotka Volterra: After Fitting\");\n\n\n\n\n\n\nLorenz Equations\nFinally, let’s try to fit the Lorenz equations.\n\nmodel_sim_lorenz = Lorenz(sigma=10.0, rho=28.0, beta=8.0/3.0)\nts_data = torch.arange(0, 10.0, 0.05)\ndata_lorenz = create_sim_dataset(model_sim_lorenz, \n                              ts = ts_data, \n                              num_samples=30, \n                              initial_conditions_default=torch.tensor([1.0, 0.0, 0.0]),\n                              sigma_noise=0.01, \n                              sigma_initial_conditions=0.10)\n\n\nlorenz_model = Lorenz(sigma=10.2, rho=28.2, beta=9.0/3) \nfig, ax = plot_time_series(model_sim_lorenz, lorenz_model, data_lorenz[0], title=\"Lorenz Model: Before Fitting\");\n\nax.set_xlim((2,15))\n\n(2.0, 15.0)\n\n\n\n\n\n\ntrain(lorenz_model, \n      data_lorenz, \n      epochs=300, \n      batch_size=5,\n      method = 'rk4',\n      step_size=0.05,\n      show_every=50,\n      lr = 1e-3)\n\nLoss at 0: 113.75426864624023\nLoss at 50: 4.351463496685028\nLoss at 100: 2.0423043966293335\nLoss at 150: 1.2441555112600327\nLoss at 200: 0.7774392068386078\nLoss at 250: 0.5306024551391602\n\n\nLet’s look at the results from the fitting procedure. Starting with a full plot of the dynamics.\n\nfig, ax = plot_time_series(model_sim_lorenz, lorenz_model, data_lorenz[0], title = \"Lorenz Model: After Fitting\");\n\n\n\n\nLet’s zoom in on the bulk of the data and see how the fit looks.\nYou can see the model is very close to the true model for the data range. Now the phase plane plot.\n\nplot_phase_plane(model_sim_lorenz, lorenz_model, data_lorenz[0], title = \"Lorenz Model: After Fitting\", time_range=(0,20.0));\n\n\n\n\nYou can see that our fitted model performs well for t in [0,17] and then starts to diverge."
  },
  {
    "objectID": "training.html#conclusions-and-wrap-up",
    "href": "training.html#conclusions-and-wrap-up",
    "title": "Differential Equations as a Pytorch Neural Network Layer",
    "section": "Conclusions and Wrap-Up",
    "text": "Conclusions and Wrap-Up\nIn this article I have demonstrated how we can use differential equation models within the pytorch ecosytem using the torchdiffeq package. The code from this article is available on  github  and can be opened directly to google colab for experimentation. You can also install the code from this article using pip (pip install paramfittorchdemo).\nThis post is an introduction in the future I will be writing more about the following topics:\n\nHow to blend some mechanistic knowledge of the dynamics with deep learning. These have been called  universal differential equations  as they enable us to combine scientific knowledge with deep learning. This basically blends the two approaches together.\nHow to combine differential equation layers with other deep learning layers.\nModel discovery: Can we recover the actual model equations from data? This uses tools like  SINDy  to extract the model equations from data.\nMLOps tools for managing the training of these models. This includes tools like  MLFlow ,  Weights and Biases , and  Tensorboard .\nAnything else I hear back about from you!\n\nHappy modeling!"
  }
]